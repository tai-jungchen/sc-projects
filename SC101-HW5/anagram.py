"""
File: anagram.py
Name: Alex
----------------------------------
This program recursively finds all the anagram(s)
for the word input by user and terminates when the
input string matches the EXIT constant defined
at line 19

If you correctly implement this program, you should see the
number of anagrams for each word listed below:
    * arm -> 3 anagrams
    * contains -> 5 anagrams
    * stop -> 6 anagrams
    * tesla -> 10 anagrams
    * spear -> 12 anagrams
"""

import time                   # This file allows you to calculate the speed of your algorithm

# Constants
FILE = 'dictionary.txt'       # This is the filename of an English dictionary
EXIT = '-1'                   # Controls when to stop the loop
word_dic = []                 # Storing the words from dictionary.txt
anagrams = []                 # The list which stores anagrams found


def main():
    """
    This program recursively finds all the anagram(s)
    for the word input by user and terminates when the
    input string matches the EXIT constant defined
    at line 19
    """
    ####################
    read_dictionary()
    print('Welcome to stanCode \"Anagram Generator\" (or -1 to quit)')
    while True:
        to_look_up = input('Find anagrams for:').lower()
        if to_look_up == EXIT:
            break
        start = time.time()
        find_anagrams(to_look_up, 0)
        end = time.time()
        print(f'{len(anagrams)} anagrams: {anagrams}')
        anagrams.clear()
    ####################
    print('----------------------------------')
    print(f'The speed of your anagram algorithm: {end-start} seconds.')


def read_dictionary():
    """
    This function reads the words in the given dictionary and store them into word_dic (list)
    """
    with open(FILE, 'r') as f:
        for line in f:
            word_dic.append(line.strip())


def find_anagrams(s, cur_idx):
    """
    :param s: string to look up
    :param cur_idx: current index to be swapped
    :return: the valid permutation of the input string
    """
    # base case
    if cur_idx == (len(s) - 1):
        if s in word_dic and s not in anagrams:
            print('Searching...')
            print(f'Found: {s}')
            anagrams.append(s)
        return
    # swap
    for i in range(cur_idx, len(s)):
        s_lst = list(s)
        s_lst[cur_idx], s_lst[i] = s_lst[i], s_lst[cur_idx]
        next_idx = cur_idx + 1
        find_anagrams(''.join(s_lst), next_idx)


def has_prefix(sub_s):
    """
    :param sub_s: The permutation generated by find_anagrams function
    :return: whether this sub_s is a prefix of a word in word_dic
    """
    for word in word_dic:
        if word.startswith(sub_s):
            return True
    return False


if __name__ == '__main__':
    main()
